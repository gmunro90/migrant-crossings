"use strict";function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,t,n){return t&&_defineProperties(e.prototype,t),n&&_defineProperties(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var Hypercube=function(){function a(e,t){_classCallCheck(this,a);this.elementId=e,this.options=_extends({},t);var n=document.getElementById(this.elementId);n?(n.addEventListener("click",this.handleClick.bind(this)),n.innerHTML="<table id='".concat(this.elementId,"_table'></table>"),this.options.model.on("changed",this.render.bind(this)),this.render()):console.error("no element found with id - ".concat(this.elementId))}return _createClass(a,[{key:"handleClick",value:function(e){if(e.target.classList.contains("table-row")){var t=e.target.getAttribute("data-elem");this.options.model.selectHyperCubeValues("/qHyperCubeDef",0,[+t],!0).then(function(e){},function(e){console.log(e,"error")})}}},{key:"render",value:function(){var a=this;this.options.model.getLayout().then(function(e){var t="";e.qHyperCube.qDataPages[0].qMatrix.forEach(function(e){t+="<tr>",t+=e.map(function(e){return'<td data-elem="'.concat(e.qElemNumber,'"class="table-row">').concat(e.qText,"</td>")}).join(""),t+="</tr>"});var n=document.getElementById("".concat(a.elementId,"_table"));n&&(n.innerHTML=t)})}}]),a}(),session=enigma.create({schema:schema,url:"wss://ec2-3-92-185-52.compute-1.amazonaws.com/anon/app/6bb2c4a8-4328-46d5-88e1-747870f4e1d2"});session.open().then(function(e){e.openDoc("6bb2c4a8-4328-46d5-88e1-747870f4e1d2").then(function(e){console.log(e)});app.createSessionObject({qInfo:{qType:"pie"},qHyperCubeDef:{qDimensions:[{qDef:{qFieldDefs:["Details"]}}],qMeasures:[{qDef:{qDef:'Sum({$<Activity = {"Deaths /disappearances"}>}Count)',qLabel:"Deaths"}}],qInitialDataFetch:[{qTop:0,qLeft:0,qWidth:3,qHeight:10}]}}).then(function(e){new Hypercube("bar-chart-parent",{model:e}),new Test("myChart",{model:e})})});